@page "/purchases"
@using Core
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthStateProvider

<link href="css/Purchases.css" rel="stylesheet">

<div class="purchases-container">
    <h3>Mine Indkøb</h3>

    <!-- Sektion for nye varer, som endnu ikke er bekræftet -->
    <div>
        <h4>Indkøbsliste</h4>
        @if (selectedPurchases.Any())
        {
            <ul>
                @foreach (var purchase in selectedPurchases)
                {
                    <li>
                        <input type="checkbox" @bind="purchase.IsSelected" />
                        @purchase.PurchaseDate.ToShortDateString(): @purchase.ItemName - @purchase.Price.ToString("C")
                        <button @onclick="() => EditPurchase(purchase)">Rediger</button>
                        <button @onclick="() => DeletePurchase(purchase)">Slet</button>
                    </li>
                }
            </ul>

            <div>
                <strong>Total for valgte varer: </strong>
                @($"{selectedPurchases.Where(p => p.IsSelected).Sum(p => p.Price):C}")
            </div>

            <button @onclick="ApproveSelectedPurchases" class="approve-button">Godkend Valgte Køb</button>
            <button class="cancel-button" @onclick="CancelSelectedPurchases">Annuller Valgte Køb</button>
        }
        else
        {
            <p>Ingen nye varer til godkendelse.</p>
        }
    </div>

    <!-- Sektion for allerede bekræftede køb -->
    <div>
        <h4>Bekræftede køb</h4>
        @if (confirmedPurchases.Any())
        {
            <ul>
                @foreach (var purchase in confirmedPurchases)
                {
                    <li>
                        @purchase.PurchaseDate.ToShortDateString(): @purchase.ItemName - @purchase.Price.ToString("C")
                        <button @onclick="() => EditPurchase(purchase)">Rediger</button>
                        <button @onclick="() => DeletePurchase(purchase)">Slet</button>
                    </li>
                }
            </ul>

            <div>
                <strong>Total for bekræftede køb: </strong>
                @($"{confirmedPurchases.Sum(p => p.Price):C}")
            </div>
        }
        else
        {
            <p>Ingen bekræftede køb endnu.</p>
        }
    </div>

    <!-- Formular til oprettelse/redigering af et køb -->
    <div class="purchase-form">
        <h4>@(editMode ? "Rediger Køb" : "Opret Nyt Køb")</h4>
        <input placeholder="Varenavn" @bind="purchaseForm.ItemName" />
        <input placeholder="Pris" @bind="purchaseForm.Price" type="number" />
        <button @onclick="SavePurchase">@((editMode ? "Gem Ændringer" : "Opret Køb"))</button>
        <button @onclick="CancelEdit">Annuller</button>
    </div>
</div>

@code {
    private List<Purchase> selectedPurchases = new List<Purchase>();
    private List<Purchase> confirmedPurchases = new List<Purchase>();
    private Purchase purchaseForm = new Purchase();
    private bool editMode = false;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(c => c.Type == "sub")?.Value;

        await LoadUserPurchases();
    }

    private async Task LoadUserPurchases()
    {
        var purchases = await HttpClient.GetFromJsonAsync<List<Purchase>>($"api/purchase?userId={userId}");
        selectedPurchases = purchases.Where(p => p.Status == "pending").ToList();
        confirmedPurchases = purchases.Where(p => p.Status == "confirmed").ToList();
    }

    private async Task ApproveSelectedPurchases()
    {
        var selectedForConfirmation = selectedPurchases.Where(p => p.IsSelected).ToList();

        if (selectedForConfirmation.Any())
        {
            foreach (var purchase in selectedForConfirmation)
            {
                purchase.Status = "confirmed";
                await HttpClient.PatchAsync($"api/purchase/{purchase.Id}/status", JsonContent.Create("confirmed"));
            }

            selectedPurchases = selectedPurchases.Except(selectedForConfirmation).ToList();
            confirmedPurchases.AddRange(selectedForConfirmation);
        }
    }

    private void CancelSelectedPurchases()
    {
        selectedPurchases = selectedPurchases.Where(p => !p.IsSelected).ToList();
    }

    private async Task DeletePurchase(Purchase purchase)
    {
        await HttpClient.DeleteAsync($"api/purchase/{purchase.Id}");
        selectedPurchases.Remove(purchase);
        confirmedPurchases.Remove(purchase);
    }

    private void EditPurchase(Purchase purchase)
    {
        purchaseForm = new Purchase
            {
                Id = purchase.Id,
                ItemName = purchase.ItemName,
                Price = purchase.Price,
                PurchaseDate = purchase.PurchaseDate,
                Status = purchase.Status,
                UserId = purchase.UserId
            };
        editMode = true;
    }

    private async Task SavePurchase()
    {
        if (editMode)
        {
            await HttpClient.PutAsJsonAsync($"api/purchase/{purchaseForm.Id}", purchaseForm);
        }
        else
        {
            purchaseForm.UserId = userId;
            purchaseForm.PurchaseDate = DateTime.UtcNow;
            purchaseForm.Status = "pending";
            await HttpClient.PostAsJsonAsync("api/purchase", purchaseForm);
            selectedPurchases.Add(purchaseForm);
        }

        purchaseForm = new Purchase();
        editMode = false;
        await LoadUserPurchases();
    }

    private void CancelEdit()
    {
        purchaseForm = new Purchase();
        editMode = false;
    }
}
