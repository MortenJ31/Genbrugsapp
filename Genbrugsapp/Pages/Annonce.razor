@page "/annonce"
@using Core
@inject HttpClient Http

<h2 class="page-title">Administrer og Find Annoncer</h2>

<div class="action-buttons">
    <button class="add-button" @onclick="AddNewAd">+ Opret Ny Annonce</button>
    <button class="reset-button" @onclick="ResetFilters">Nulstil Filter</button>
</div>

<!-- Søgning og filtrering -->
<div class="search-filter">
    <input type="text" placeholder="Søg efter titel..." @oninput="@(e => OnSearchChanged(e))" class="form-control search-input" />
    <input type="number" placeholder="Minimum Pris" @oninput="@(e => OnPriceChanged(e, "min"))" class="form-control price-input" />
    <input type="number" placeholder="Maksimum Pris" @oninput="@(e => OnPriceChanged(e, "max"))" class="form-control price-input" />
    
    <select multiple @onchange="OnCategoryChange" class="form-control category-select">
        @foreach (var category in categories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </select>
</div>

<!-- Liste over filtrerede annoncer -->
@if (filteredAds != null && filteredAds.Any())
{
    <div class="ads-container">
        @foreach (var ad in filteredAds)
        {
            <div class="ad-card" @onclick="() => ShowAdDetails(ad)">
                <img src="@ad.ImageUrl" alt="Ad image" class="ad-image" />
                <div class="ad-info">
                    <h3 class="ad-title">@ad.Title</h3>
                    <p class="ad-price">@ad.Price.ToString("N2") kr</p>
                </div>
                <div class="ad-actions">
                    <button class="edit-button" @onclick="() => EditAd(ad)">Rediger</button>
                    <button class="delete-button" @onclick="() => DeleteAd(ad.Id ?? string.Empty)">Slet</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p class="no-ads-message">Ingen aktive annoncer tilgængelige.</p>
}

<!-- Detaljevisning af annoncer -->
@if (selectedAd != null)
{
    <div class="ad-details-modal">
        <div class="modal-content">
            <span class="close-button" @onclick="CloseAdDetails">×</span>
            <h3>@selectedAd.Title</h3>
            <img src="@selectedAd.ImageUrl" alt="Ad image" class="modal-image" />
            <p>@selectedAd.Description</p>
            <p><strong>Pris:</strong> @selectedAd?.Price.ToString("N2") kr</p>
            <p><strong>Lokation:</strong> @(selectedAd?.Location?.Classroom ?? "Ikke angivet"), @(selectedAd?.Location?.Address ?? "Ikke angivet")</p>
            <p><strong>Status:</strong> @selectedAd?.Status</p>
        </div>
    </div>
}

@code {
    private List<Ad> filteredAds = new List<Ad>();
    private Ad? selectedAd;
    private string searchQuery = "";
    private double? minPrice;
    private double? maxPrice;
    private List<string> selectedCategories = new List<string>();
    private List<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        categories = await Http.GetFromJsonAsync<List<Category>>("http://localhost:5066/api/Category") ?? new List<Category>();
        await LoadFilteredAds();
    }

    private async Task LoadFilteredAds()
    {
        var uri = $"http://localhost:5066/api/Ad/filter?";
        var parameters = new List<string>();

        if (!string.IsNullOrEmpty(searchQuery)) parameters.Add($"searchQuery={searchQuery}");
        if (minPrice.HasValue) parameters.Add($"minPrice={minPrice}");
        if (maxPrice.HasValue) parameters.Add($"maxPrice={maxPrice}");
        if (selectedCategories.Any()) parameters.Add($"categoryId={string.Join(",", selectedCategories)}");

        uri += string.Join("&", parameters);

        try
        {
            filteredAds = await Http.GetFromJsonAsync<List<Ad>>(uri) ?? new List<Ad>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading filtered ads: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task ResetFilters()
    {
        searchQuery = string.Empty;
        minPrice = null;
        maxPrice = null;
        selectedCategories.Clear();
        await LoadFilteredAds();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        await LoadFilteredAds();
    }

    private async Task OnPriceChanged(ChangeEventArgs e, string type)
    {
        if (double.TryParse(e.Value?.ToString(), out double value))
        {
            if (type == "min") minPrice = value;
            else maxPrice = value;
            await LoadFilteredAds();
        }
        else
        {
            if (type == "min") minPrice = null;
            else maxPrice = null;
            await LoadFilteredAds();
        }
    }

    private async Task OnCategoryChange(ChangeEventArgs e)
    {
        selectedCategories = ((IEnumerable<string>)e.Value)?.ToList() ?? new List<string>();
        await LoadFilteredAds();
    }

    private void ShowAdDetails(Ad ad) => selectedAd = ad;
    private void CloseAdDetails() => selectedAd = null;
    private void AddNewAd() => selectedAd = new Ad();
    private void EditAd(Ad ad) => selectedAd = ad;

    private async Task DeleteAd(string id)
    {
        if (!string.IsNullOrEmpty(id))
        {
            await Http.DeleteAsync($"http://localhost:5066/api/Ad/{id}");
            await LoadFilteredAds();
        }
    }
}
