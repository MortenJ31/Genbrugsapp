@page "/annonce"
@using Core
@inject HttpClient Http
@using MongoDB.Bson;
<h2 class="page-title">Manage Your Marketplace Ads</h2>

<div class="action-buttons">
    <button class="add-button" @onclick="AddNewAd">+ Add New Announcement</button>
</div>

@if (ads != null && ads.Any())
{
<div class="ads-container">
    @foreach (var ad in ads)
    {
    <div class="ad-card">
        <img src="@ad.ImageUrl" alt="Ad image" class="ad-image" />
        <div class="ad-info">
            <h3 class="ad-title">@ad.Title</h3>
            <p class="ad-description">@ad.Description</p>
            <p class="ad-price">@ad.Price.ToString("C")</p>
            <span class="ad-status @ad.Status.ToLower()">@ad.Status</span>
            <p class="ad-category">Category: @ad.CategoryId</p>
            <p class="ad-location">Location: @ad.LocationId</p>
        </div>
        <div class="ad-actions">
            <button class="edit-button" @onclick="() => EditAd(ad)">Edit</button>
            <button class="delete-button" @onclick="() => DeleteAd(ad.Id)">Delete</button>
        </div>
    </div>
    }
</div>
}
else
{
<p class="no-ads-message">No ads available.</p>
}

<EditForm Model="@currentAd" OnValidSubmit="SaveAd" class="edit-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Title:</label>
        <InputText @bind-Value="currentAd.Title" class="form-control" />
    </div>
    <div class="form-group">
        <label>Description:</label>
        <InputTextArea @bind-Value="currentAd.Description" class="form-control" />
    </div>
    <div class="form-group">
        <label>Price:</label>
        <InputNumber @bind-Value="currentAd.Price" class="form-control" />
    </div>
    <div class="form-group">
        <label>Status:</label>
        <InputSelect @bind-Value="currentAd.Status" class="form-control">
            <option value="">-- Select Status --</option>
            <option value="Active">Active</option>
            <option value="Reserved">Reserved</option>
            <option value="Sold">Sold</option>
            <option value="Inactive">Inactive</option>
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Image URL:</label>
        <InputText @bind-Value="currentAd.ImageUrl" class="form-control" />
    </div>
    <div class="form-group">
        <label>Category:</label>
        <InputText @bind-Value="currentAd.CategoryId" class="form-control" />
    </div>
    <div class="form-group">
        <label>Location:</label>
        <InputText @bind-Value="currentAd.LocationId" class="form-control" />
    </div>

    <button type="submit" class="save-button">Save</button>
    <button type="button" class="cancel-button" @onclick="CancelEdit">Cancel</button>
</EditForm>

@code {
    private List<Ad>? ads = new List<Ad>();
    private Ad currentAd = new Ad();

    protected override async Task OnInitializedAsync()
    {
        ads = await Http.GetFromJsonAsync<List<Ad>>("http://localhost:5066/api/Ad");
    }

    private void AddNewAd()
    {
        currentAd = new Ad { CreatedAt = DateTime.Now, Status = "Active" };
    }

    private void EditAd(Ad ad)
    {
        currentAd = ad;
    }

    private async Task SaveAd()
    {
        // Sørg for, at Id er null for en ny annonce
        if (string.IsNullOrWhiteSpace(currentAd.Id))
        {
            currentAd.Id = null;

            // Kontrollér og sæt kun gyldige ObjectId'er eller null
            currentAd.UserId = IsValidObjectId(currentAd.UserId) ? currentAd.UserId : null;
            currentAd.CategoryId = IsValidObjectId(currentAd.CategoryId) ? currentAd.CategoryId : null;
            currentAd.LocationId = IsValidObjectId(currentAd.LocationId) ? currentAd.LocationId : null;

            var response = await Http.PostAsJsonAsync("http://localhost:5066/api/Ad", currentAd);

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"POST request failed with status code: {response.StatusCode}");
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error details: {errorContent}");
            }
        }
        else
        {
            await Http.PutAsJsonAsync($"http://localhost:5066/api/Ad/{currentAd.Id}", currentAd);
        }

        // Hent de opdaterede annoncer
        ads = await Http.GetFromJsonAsync<List<Ad>>("http://localhost:5066/api/Ad");
        currentAd = new Ad(); // Nulstil currentAd efter gem
    }

// Helper-metode til at validere om en streng er en gyldig ObjectId
    private bool IsValidObjectId(string? objectId)
    {
        return ObjectId.TryParse(objectId, out _);
    }



    private async Task DeleteAd(string id)
    {
        await Http.DeleteAsync($"http://localhost:5066/api/Ad/{id}");
        ads = await Http.GetFromJsonAsync<List<Ad>>("http://localhost:5066/api/Ad");
    }

    private void CancelEdit()
    {
        currentAd = new Ad();
    }
}
