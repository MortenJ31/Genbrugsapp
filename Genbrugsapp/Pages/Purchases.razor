@page "/purchases"
@using Core;

@inject HttpClient HttpClient
    
<link href="css/Purchases.css" rel="stylesheet">

<div class="purchases-container">
    <h3>Mine Indkøb</h3>

    <!-- Sektion for nye varer, som endnu ikke er bekræftet -->
    <div>
        <h4>Indkøbsliste</h4>
        @if (selectedPurchases.Any())
        {
            <ul>
                @foreach (var purchase in selectedPurchases)
                {
                    <li>
                        <!-- Checkbox til valg af køb -->
                        <input type="checkbox" @bind="purchase.IsSelected" />
                        @purchase.PurchaseDate.ToShortDateString(): @purchase.ItemName - @purchase.Price.ToString("C")
                    </li>
                }
            </ul>

            <!-- Vis totalen af de valgte varer -->
            <div>
                <strong>Total for valgte varer: </strong>
                @($"{selectedPurchases.Where(p => p.IsSelected).Sum(p => p.Price):C}")
            </div>

            <!-- Knapper til godkendelse og annullering af valgte køb -->
            <button @onclick="ApproveSelectedPurchases" class="approve-button">Godkend Valgte Køb</button>
            <button class="cancel-button" @onclick="CancelSelectedPurchases">Annuller Valgte Køb</button>
        }
        else
        {
            <p>Ingen nye varer til godkendelse.</p>
        }
    </div>

    <!-- Sektion for allerede bekræftede køb -->
    <div>
        <h4>Bekræftede køb</h4>
        @if (confirmedPurchases.Any())
        {
            <ul>
                @foreach (var purchase in confirmedPurchases)
                {
                    <li>@purchase.PurchaseDate.ToShortDateString(): @purchase.ItemName - @purchase.Price.ToString("C")</li>
                }
            </ul>

            <!-- Vis totalen af de bekræftede køb -->
            <div>
                <strong>Total for bekræftede køb: </strong>
                @($"{confirmedPurchases.Sum(p => p.Price):C}")
            </div>
        }
        else
        {
            <p>Ingen bekræftede køb endnu.</p>
        }
    </div>
</div>

@code {
    private List<Purchase> selectedPurchases = new List<Purchase>(); // Liste over nye varer
    private List<Purchase> confirmedPurchases = new List<Purchase>(); // Liste over bekræftede køb

    protected override async Task OnInitializedAsync()
    {
        await LoadSelectedPurchases();
        await LoadConfirmedPurchases();
    }

    private async Task LoadSelectedPurchases()
    {
        // Hent valgte varer (simuleret data)
        selectedPurchases = new List<Purchase>
        {
            new Purchase { Id = 1, ItemName = "Laptop", Price = 7999.99M, PurchaseDate = DateTime.Now.AddDays(-3) },
            new Purchase { Id = 2, ItemName = "Smartphone", Price = 4999.99M, PurchaseDate = DateTime.Now.AddDays(-10) }
        };
    }

    private async Task LoadConfirmedPurchases()
    {
        // Simuler indlæsning af tidligere bekræftede køb, f.eks. fra en database
        confirmedPurchases = new List<Purchase>
        {
            new Purchase { Id = 3, ItemName = "Headphones", Price = 999.99M, PurchaseDate = DateTime.Now.AddDays(-15) }
        };
    }

    private async Task ApproveSelectedPurchases()
    {
        // Find de valgte varer (dem med IsSelected = true)
        var selectedForConfirmation = selectedPurchases.Where(p => p.IsSelected).ToList();

        if (selectedForConfirmation.Any())
        {
            // Flyt de valgte varer til "confirmedPurchases" og fjern dem fra "selectedPurchases"
            confirmedPurchases.AddRange(selectedForConfirmation);
            selectedPurchases = selectedPurchases.Except(selectedForConfirmation).ToList();

            // Send data til backend for at gemme købet som bekræftet (simuleret)
            await HttpClient.PostAsJsonAsync("api/purchases/confirm", selectedForConfirmation);
        }
    }

    private void CancelSelectedPurchases()
    {
        // Find og fjern de valgte varer fra "selectedPurchases" (dem med IsSelected = true)
        selectedPurchases = selectedPurchases.Where(p => !p.IsSelected).ToList();
    }
}
